-- HC8_AllTasks.hs

-- HC8T1: Type synonyms and transaction string generator
type Address = String
type Value = Int

generateTx :: Address -> Address -> Value -> String
generateTx from to amount = "From: " ++ from ++ " To: " ++ to ++ " Amount: " ++ show amount

-- HC8T2: PaymentMethod and Person
data PaymentMethod = Cash | Card | Cryptocurrency deriving Show

data PersonA = PersonA
  { nameA     :: String
  , addressA  :: (String, Int)
  , payment   :: PaymentMethod
  } deriving Show

bob :: PersonA
bob = PersonA
  { nameA = "Bob"
  , addressA = ("Main Street", 123)
  , payment = Cash
  }

-- HC8T3: Shape and area function
data Shape1 = Circle1 Float | Rectangle1 Float Float deriving Show

area :: Shape1 -> Float
area (Circle1 r) = pi * r * r
area (Rectangle1 w h) = w * h

-- HC8T4: Employee with record syntax
data Employee = Employee
  { nameE :: String
  , experienceInYears :: Float
  } deriving Show

richard :: Employee
richard = Employee { nameE = "Richard", experienceInYears = 7.5 }

-- HC8T5: Person with record syntax
data PersonB = PersonB
  { nameB       :: String
  , ageB        :: Int
  , isEmployedB :: Bool
  } deriving Show

person1 :: PersonB
person1 = PersonB { nameB = "Alice", ageB = 30, isEmployedB = True }

person2 :: PersonB
person2 = PersonB { nameB = "Eve", ageB = 25, isEmployedB = False }

-- HC8T6: Shape with record syntax (Circle and Rectangle)
data Shape2
  = Circle2 { center :: (Float, Float), colorC :: String, radius :: Float }
  | Rectangle2 { width :: Float, height :: Float, colorR :: String }
  deriving Show

circleInstance :: Shape2
circleInstance = Circle2 { center = (0, 0), colorC = "Red", radius = 10 }

rectangleInstance :: Shape2
rectangleInstance = Rectangle2 { width = 5, height = 10, colorR = "Blue" }

-- HC8T7: Animal type with describe function
data Animal = Dog String | Cat String deriving Show

describeAnimal :: Animal -> String
describeAnimal (Dog name) = "A dog named " ++ name
describeAnimal (Cat name) = "A cat named " ++ name

dog1 :: Animal
dog1 = Dog "Max"

cat1 :: Animal
cat1 = Cat "Luna"

-- HC8T8: Type synonyms and greeting
type Name = String
type Age = Int

greet :: Name -> Age -> String
greet n a = "Hello, " ++ n ++ "! You are " ++ show a ++ " years old."

-- HC8T9: Transaction with createTransaction
data Transaction = Transaction
  { from :: Address
  , to :: Address
  , amount :: Value
  , transactionId :: String
  } deriving Show

createTransaction :: Address -> Address -> Value -> String
createTransaction fromAddr toAddr val =
  let txId = "TX-" ++ take 6 (fromAddr ++ toAddr) ++ "-" ++ show val
  in show Transaction { from = fromAddr, to = toAddr, amount = val, transactionId = txId }

-- HC8T10: Book with Show deriving
data Book = Book
  { title  :: String
  , author :: String
  , year   :: Int
  } deriving Show

myBook :: Book
myBook = Book { title = "Learn You a Haskell", author = "Miran Lipovaƒça", year = 2011 }

-- === Main ===

main :: IO ()
main = do
  putStrLn "== HC8T1 =="
  putStrLn $ generateTx "addr1" "addr2" 100

  putStrLn "\n== HC8T2 =="
  print bob

  putStrLn "\n== HC8T3 =="
  print $ area (Circle1 5)
  print $ area (Rectangle1 10 5)

  putStrLn "\n== HC8T4 =="
  print richard

  putStrLn "\n== HC8T5 =="
  print person1
  print person2

  putStrLn "\n== HC8T6 =="
  print circleInstance
  print rectangleInstance

  putStrLn "\n== HC8T7 =="
  putStrLn $ describeAnimal dog1
  putStrLn $ describeAnimal cat1

  putStrLn "\n== HC8T8 =="
  putStrLn $ greet "Chinedu" 28

  putStrLn "\n== HC8T9 =="
  putStrLn $ createTransaction "Alpha1" "Beta2" 450

  putStrLn "\n== HC8T10 =="
  print myBook
