-- HC17T1: Severity Data Type and Semigroup Instance
module HC17T1 where

import Data.Semigroup

data Severity = Low | Medium | High | Critical deriving (Show, Eq, Ord)

instance Semigroup Severity where
  (<>) = max

main :: IO ()
main = print (Medium <> Critical)


-- HC17T2: Min and Max Newtypes with Semigroup
module HC17T2 where

newtype Min a = Min a deriving Show
newtype Max a = Max a deriving Show

instance Ord a => Semigroup (Min a) where
  Min x <> Min y = Min (min x y)

instance Ord a => Semigroup (Max a) where
  Max x <> Max y = Max (max x y)

main :: IO ()
main = do
  print (Min 3 <> Min 5)
  print (Max 3 <> Max 5)


-- HC17T3: Monoid Instance for Severity
module HC17T3 where

import HC17T1
import Data.Semigroup
import Data.Monoid

instance Monoid Severity where
  mempty = Low

main :: IO ()
main = print (mempty <> High)


-- HC17T4: Monoid Instance for Sum Newtype
module HC17T4 where

newtype Sum a = Sum a deriving Show

instance Num a => Semigroup (Sum a) where
  Sum x <> Sum y = Sum (x + y)

instance Num a => Monoid (Sum a) where
  mempty = Sum 0

main :: IO ()
main = print (mempty <> Sum 5 <> Sum 10)


-- HC17T5: combineLists Function
module HC17T5 where

combineLists :: [Int] -> [Int] -> [Int]
combineLists = (<>)

main :: IO ()
main = print (combineLists [1, 2] [3, 4])


-- HC17T6: maxSeverity Function
module HC17T6 where

import HC17T1
import Data.Monoid

maxSeverity :: [Severity] -> Severity
maxSeverity = mconcat

main :: IO ()
main = print (maxSeverity [Low, Medium, High, Critical, Medium])


-- HC17T7: multiplyProducts Function
module HC17T7 where

newtype Product = Product Int deriving Show

instance Semigroup Product where
  Product x <> Product y = Product (x * y)

instance Monoid Product where
  mempty = Product 1

multiplyProducts :: [Product] -> Product
multiplyProducts = mconcat

main :: IO ()
main = print (multiplyProducts [Product 2, Product 3, Product 4])


-- HC17T8: foldWithSemigroup Function
module HC17T8 where

foldWithSemigroup :: Semigroup a => [a] -> a
foldWithSemigroup = foldr1 (<>)

main :: IO ()
main = print (foldWithSemigroup [[1,2],[3],[4,5]])


-- HC17T9: Config Data Type and Semigroup Instance
module HC17T9 where

data Config = Config {
  loggingLevel :: Int,
  timeout :: Int,
  retries :: Int
} deriving Show

instance Semigroup Config where
  (<>) (Config l1 t1 r1) (Config l2 t2 r2) =
    Config (max l1 l2) (min t1 t2) (max r1 r2)

main :: IO ()
main = print (Config 1 60 2 <> Config 2 30 3)


-- HC17T10: Monoid Instance for Config
module HC17T10 where

import HC17T9

instance Monoid Config where
  mempty = Config 0 maxBound 0

main :: IO ()
main = print (mempty <> Config 2 30 4)
