-- HC16T1: Reverse a String
module HC16T1 where

reverseString :: String -> String
reverseString = reverse

main :: IO ()
main = print (reverseString "hello")


-- HC16T2: Palindrome Checker
module HC16T2 where

isPalindrome :: String -> Bool
isPalindrome s = s == reverse s

main :: IO ()
main = print (isPalindrome "level")


-- HC16T3: Factorial
module HC16T3 where

factorial :: Integer -> Integer
factorial 0 = 1
factorial n = n * factorial (n - 1)

main :: IO ()
main = print (factorial 5)


-- HC16T4: Filter Even Numbers
module HC16T4 where

filterEvens :: [Int] -> [Int]
filterEvens = filter even

main :: IO ()
main = print (filterEvens [1..10])


-- HC16T5: Uppercase String
module HC16T5 where

import Data.Char (toUpper)

uppercase :: String -> String
uppercase = map toUpper

main :: IO ()
main = print (uppercase "hello")


-- HC16T6: nth Fibonacci Number
module HC16T6 where

fib :: Int -> Int
fib 0 = 0
fib 1 = 1
fib n = fib (n - 1) + fib (n - 2)

main :: IO ()
main = print (fib 10)


-- HC16T7: Element Existence in List
module HC16T7 where

exists :: Eq a => a -> [a] -> Bool
exists x = any (== x)

main :: IO ()
main = print (exists 5 [1,2,3,4,5])


-- HC16T8: Insertion Sort
module HC16T8 where

insert :: Ord a => a -> [a] -> [a]
insert x [] = [x]
insert x (y:ys)
  | x <= y    = x : y : ys
  | otherwise = y : insert x ys

insertionSort :: Ord a => [a] -> [a]
insertionSort = foldr insert []

main :: IO ()
main = print (insertionSort [5,2,8,1,3])


-- HC16T9: Remove Duplicates from List
module HC16T9 where

removeDuplicates :: Eq a => [a] -> [a]
removeDuplicates [] = []
removeDuplicates (x:xs)
  | x `elem` xs = removeDuplicates xs
  | otherwise   = x : removeDuplicates xs

main :: IO ()
main = print (removeDuplicates [1,2,2,3,4,4,5])


-- HC16T10: Character Frequency in String
module HC16T10 where

import Data.List (group, sort)

charFrequency :: String -> [(Char, Int)]
charFrequency s = map (\grp -> (head grp, length grp)) . group . sort $ s

main :: IO ()
main = print (charFrequency "hello world")
