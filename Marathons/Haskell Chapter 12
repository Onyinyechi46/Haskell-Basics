-- HC12T1: Print a Welcome Message
module HC12T1 where

main :: IO ()
main = print "Welcome to Haskell Programming!"

-- HC12T2: Add Two Numbers
module HC12T2 where

addTwoNumbers :: Int -> Int -> Int
addTwoNumbers x y = x + y

main :: IO ()
main = print $ addTwoNumbers 10 15

-- HC12T3: Factorial Function
module HC12T3 where

factorial :: Integer -> Integer
factorial 0 = 1
factorial n = n * factorial (n - 1)

main :: IO ()
main = print $ factorial 5

-- HC12T4: First 10 Fibonacci Numbers
module HC12T4 where

fib :: Int -> Int
fib 0 = 0
fib 1 = 1
fib n = fib (n - 1) + fib (n - 2)

main :: IO ()
main = print $ map fib [0..9]

-- HC12T5: Palindrome Checker
module HC12T5 where

isPalindrome :: String -> Bool
isPalindrome s = s == reverse s

main :: IO ()
main = do
  putStrLn "Enter a string:"
  input <- getLine
  print $ isPalindrome input

-- HC12T6: Sort a List of Integers
module HC12T6 where
import Data.List (sort)

main :: IO ()
main = do
  putStrLn "Enter a list of integers separated by space:"
  input <- getLine
  let numbers = map read (words input) :: [Int]
  print $ sort numbers

-- HC12T7: Calculate Circle Area
module HC12T7 where

calculateCircleArea :: Floating a => a -> a
calculateCircleArea r = pi * r * r

main :: IO ()
main = print $ calculateCircleArea 5

-- HC12T8: Merge Two Sorted Lists
module HC12T8 where

mergeLists :: Ord a => [a] -> [a] -> [a]
mergeLists xs [] = xs
mergeLists [] ys = ys
mergeLists (x:xs) (y:ys)
  | x < y     = x : mergeLists xs (y:ys)
  | otherwise = y : mergeLists (x:xs) ys

main :: IO ()
main = print $ mergeLists [1,3,5] [2,4,6]

-- HC12T9: Read and Print File Content
module HC12T9 where
import System.IO
import Control.Exception

main :: IO ()
main = do
  putStrLn "Enter filename:"
  filename <- getLine
  result <- try (readFile filename) :: IO (Either IOError String)
  case result of
    Left err -> putStrLn $ "Error reading file: " ++ show err
    Right content -> putStrLn content

-- HC12T10: Mathematical Operations Module
module HC12T10 where

add :: Int -> Int -> Int
add x y = x + y

subtract' :: Int -> Int -> Int
subtract' x y = x - y

multiply :: Int -> Int -> Int
multiply x y = x * y

divide :: Int -> Int -> Maybe Int
divide _ 0 = Nothing
divide x y = Just (x `div` y)

main :: IO ()
main = do
  print $ add 5 3
  print $ subtract' 10 4
  print $ multiply 3 4
  print $ divide 10 2
